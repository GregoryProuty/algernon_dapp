// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  EthereumCall,
  EthereumEvent,
  SmartContract,
  EthereumValue,
  JSONValue,
  TypedMap,
  Entity,
  EthereumTuple,
  Bytes,
  Address,
  BigInt,
  CallResult
} from "@graphprotocol/graph-ts";

export class ChildAccountUpdated extends EthereumEvent {
  get params(): ChildAccountUpdated__Params {
    return new ChildAccountUpdated__Params(this);
  }
}

export class ChildAccountUpdated__Params {
  _event: ChildAccountUpdated;

  constructor(event: ChildAccountUpdated) {
    this._event = event;
  }

  get parent(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get child(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class StakeAdded extends EthereumEvent {
  get params(): StakeAdded__Params {
    return new StakeAdded__Params(this);
  }
}

export class StakeAdded__Params {
  _event: StakeAdded;

  constructor(event: StakeAdded) {
    this._event = event;
  }

  get staker(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get totalAmt(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get stakeAmt(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get topicId(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get tagId(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class StakeUpdated extends EthereumEvent {
  get params(): StakeUpdated__Params {
    return new StakeUpdated__Params(this);
  }
}

export class StakeUpdated__Params {
  _event: StakeUpdated;

  constructor(event: StakeUpdated) {
    this._event = event;
  }

  get amt(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get stakeIdx(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class TagAdded extends EthereumEvent {
  get params(): TagAdded__Params {
    return new TagAdded__Params(this);
  }
}

export class TagAdded__Params {
  _event: TagAdded;

  constructor(event: TagAdded) {
    this._event = event;
  }

  get id(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get tag(): string {
    return this._event.parameters[1].value.toString();
  }

  get addedBy(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class TopicCreated extends EthereumEvent {
  get params(): TopicCreated__Params {
    return new TopicCreated__Params(this);
  }
}

export class TopicCreated__Params {
  _event: TopicCreated;

  constructor(event: TopicCreated) {
    this._event = event;
  }

  get id(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get tagIds(): Array<BigInt> {
    return this._event.parameters[1].value.toBigIntArray();
  }

  get owner(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get content(): string {
    return this._event.parameters[3].value.toString();
  }
}

export class TopicTagUpdated extends EthereumEvent {
  get params(): TopicTagUpdated__Params {
    return new TopicTagUpdated__Params(this);
  }
}

export class TopicTagUpdated__Params {
  _event: TopicTagUpdated;

  constructor(event: TopicTagUpdated) {
    this._event = event;
  }

  get topicId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get tagId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get added(): boolean {
    return this._event.parameters[2].value.toBoolean();
  }
}

export class TopicTagsUpdated extends EthereumEvent {
  get params(): TopicTagsUpdated__Params {
    return new TopicTagsUpdated__Params(this);
  }
}

export class TopicTagsUpdated__Params {
  _event: TopicTagsUpdated;

  constructor(event: TopicTagsUpdated) {
    this._event = event;
  }

  get id(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get tagIds(): Array<BigInt> {
    return this._event.parameters[1].value.toBigIntArray();
  }
}

export class TopicUpdated extends EthereumEvent {
  get params(): TopicUpdated__Params {
    return new TopicUpdated__Params(this);
  }
}

export class TopicUpdated__Params {
  _event: TopicUpdated;

  constructor(event: TopicUpdated) {
    this._event = event;
  }

  get id(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get tagIds(): Array<BigInt> {
    return this._event.parameters[1].value.toBigIntArray();
  }

  get content(): string {
    return this._event.parameters[2].value.toString();
  }
}

export class Algernon__getTopicResult {
  value0: string;
  value1: Address;
  value2: Array<BigInt>;

  constructor(value0: string, value1: Address, value2: Array<BigInt>) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, EthereumValue> {
    let map = new TypedMap<string, EthereumValue>();
    map.set("value0", EthereumValue.fromString(this.value0));
    map.set("value1", EthereumValue.fromAddress(this.value1));
    map.set("value2", EthereumValue.fromUnsignedBigIntArray(this.value2));
    return map;
  }
}

export class Algernon__getTopicTagStakesResult {
  value0: Array<BigInt>;
  value1: Array<BigInt>;
  value2: Array<Address>;

  constructor(
    value0: Array<BigInt>,
    value1: Array<BigInt>,
    value2: Array<Address>
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, EthereumValue> {
    let map = new TypedMap<string, EthereumValue>();
    map.set("value0", EthereumValue.fromUnsignedBigIntArray(this.value0));
    map.set("value1", EthereumValue.fromUnsignedBigIntArray(this.value1));
    map.set("value2", EthereumValue.fromAddressArray(this.value2));
    return map;
  }
}

export class Algernon extends SmartContract {
  static bind(address: Address): Algernon {
    return new Algernon("Algernon", address);
  }

  childAccounts(param0: Address): Address {
    let result = super.call("childAccounts", [
      EthereumValue.fromAddress(param0)
    ]);

    return result[0].toAddress();
  }

  try_childAccounts(param0: Address): CallResult<Address> {
    let result = super.tryCall("childAccounts", [
      EthereumValue.fromAddress(param0)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toAddress());
  }

  doesTagExist(_tag: string): boolean {
    let result = super.call("doesTagExist", [EthereumValue.fromString(_tag)]);

    return result[0].toBoolean();
  }

  try_doesTagExist(_tag: string): CallResult<boolean> {
    let result = super.tryCall("doesTagExist", [
      EthereumValue.fromString(_tag)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBoolean());
  }

  getTag(_id: BigInt): string {
    let result = super.call("getTag", [EthereumValue.fromUnsignedBigInt(_id)]);

    return result[0].toString();
  }

  try_getTag(_id: BigInt): CallResult<string> {
    let result = super.tryCall("getTag", [
      EthereumValue.fromUnsignedBigInt(_id)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toString());
  }

  getTagAddressTopicIds(_tagId: BigInt, _address: Address): Array<BigInt> {
    let result = super.call("getTagAddressTopicIds", [
      EthereumValue.fromUnsignedBigInt(_tagId),
      EthereumValue.fromAddress(_address)
    ]);

    return result[0].toBigIntArray();
  }

  try_getTagAddressTopicIds(
    _tagId: BigInt,
    _address: Address
  ): CallResult<Array<BigInt>> {
    let result = super.tryCall("getTagAddressTopicIds", [
      EthereumValue.fromUnsignedBigInt(_tagId),
      EthereumValue.fromAddress(_address)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigIntArray());
  }

  getTagAddresses(_tagId: BigInt): Array<Address> {
    let result = super.call("getTagAddresses", [
      EthereumValue.fromUnsignedBigInt(_tagId)
    ]);

    return result[0].toAddressArray();
  }

  try_getTagAddresses(_tagId: BigInt): CallResult<Array<Address>> {
    let result = super.tryCall("getTagAddresses", [
      EthereumValue.fromUnsignedBigInt(_tagId)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toAddressArray());
  }

  getTagCount(): BigInt {
    let result = super.call("getTagCount", []);

    return result[0].toBigInt();
  }

  try_getTagCount(): CallResult<BigInt> {
    let result = super.tryCall("getTagCount", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  getTopic(_id: BigInt): Algernon__getTopicResult {
    let result = super.call("getTopic", [
      EthereumValue.fromUnsignedBigInt(_id)
    ]);

    return new Algernon__getTopicResult(
      result[0].toString(),
      result[1].toAddress(),
      result[2].toBigIntArray()
    );
  }

  try_getTopic(_id: BigInt): CallResult<Algernon__getTopicResult> {
    let result = super.tryCall("getTopic", [
      EthereumValue.fromUnsignedBigInt(_id)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(
      new Algernon__getTopicResult(
        value[0].toString(),
        value[1].toAddress(),
        value[2].toBigIntArray()
      )
    );
  }

  getTopicCount(): BigInt {
    let result = super.call("getTopicCount", []);

    return result[0].toBigInt();
  }

  try_getTopicCount(): CallResult<BigInt> {
    let result = super.tryCall("getTopicCount", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  getTopicTagIds(_id: BigInt): Array<BigInt> {
    let result = super.call("getTopicTagIds", [
      EthereumValue.fromUnsignedBigInt(_id)
    ]);

    return result[0].toBigIntArray();
  }

  try_getTopicTagIds(_id: BigInt): CallResult<Array<BigInt>> {
    let result = super.tryCall("getTopicTagIds", [
      EthereumValue.fromUnsignedBigInt(_id)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigIntArray());
  }

  getTopicTagStakeTotal(_topicId: BigInt, _tagId: BigInt): BigInt {
    let result = super.call("getTopicTagStakeTotal", [
      EthereumValue.fromUnsignedBigInt(_topicId),
      EthereumValue.fromUnsignedBigInt(_tagId)
    ]);

    return result[0].toBigInt();
  }

  try_getTopicTagStakeTotal(
    _topicId: BigInt,
    _tagId: BigInt
  ): CallResult<BigInt> {
    let result = super.tryCall("getTopicTagStakeTotal", [
      EthereumValue.fromUnsignedBigInt(_topicId),
      EthereumValue.fromUnsignedBigInt(_tagId)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  getTopicTagStakes(
    _topicId: BigInt,
    _tagId: BigInt
  ): Algernon__getTopicTagStakesResult {
    let result = super.call("getTopicTagStakes", [
      EthereumValue.fromUnsignedBigInt(_topicId),
      EthereumValue.fromUnsignedBigInt(_tagId)
    ]);

    return new Algernon__getTopicTagStakesResult(
      result[0].toBigIntArray(),
      result[1].toBigIntArray(),
      result[2].toAddressArray()
    );
  }

  try_getTopicTagStakes(
    _topicId: BigInt,
    _tagId: BigInt
  ): CallResult<Algernon__getTopicTagStakesResult> {
    let result = super.tryCall("getTopicTagStakes", [
      EthereumValue.fromUnsignedBigInt(_topicId),
      EthereumValue.fromUnsignedBigInt(_tagId)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(
      new Algernon__getTopicTagStakesResult(
        value[0].toBigIntArray(),
        value[1].toBigIntArray(),
        value[2].toAddressArray()
      )
    );
  }

  getUserStakeIds(_address: Address): Array<BigInt> {
    let result = super.call("getUserStakeIds", [
      EthereumValue.fromAddress(_address)
    ]);

    return result[0].toBigIntArray();
  }

  try_getUserStakeIds(_address: Address): CallResult<Array<BigInt>> {
    let result = super.tryCall("getUserStakeIds", [
      EthereumValue.fromAddress(_address)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigIntArray());
  }

  getUserTopicCount(_user: Address): BigInt {
    let result = super.call("getUserTopicCount", [
      EthereumValue.fromAddress(_user)
    ]);

    return result[0].toBigInt();
  }

  try_getUserTopicCount(_user: Address): CallResult<BigInt> {
    let result = super.tryCall("getUserTopicCount", [
      EthereumValue.fromAddress(_user)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  getUserTopicIds(_user: Address): Array<BigInt> {
    let result = super.call("getUserTopicIds", [
      EthereumValue.fromAddress(_user)
    ]);

    return result[0].toBigIntArray();
  }

  try_getUserTopicIds(_user: Address): CallResult<Array<BigInt>> {
    let result = super.tryCall("getUserTopicIds", [
      EthereumValue.fromAddress(_user)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigIntArray());
  }

  isChildAccount(parent: Address, child: Address): boolean {
    let result = super.call("isChildAccount", [
      EthereumValue.fromAddress(parent),
      EthereumValue.fromAddress(child)
    ]);

    return result[0].toBoolean();
  }

  try_isChildAccount(parent: Address, child: Address): CallResult<boolean> {
    let result = super.tryCall("isChildAccount", [
      EthereumValue.fromAddress(parent),
      EthereumValue.fromAddress(child)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBoolean());
  }

  tokenBalances(param0: Address): BigInt {
    let result = super.call("tokenBalances", [
      EthereumValue.fromAddress(param0)
    ]);

    return result[0].toBigInt();
  }

  try_tokenBalances(param0: Address): CallResult<BigInt> {
    let result = super.tryCall("tokenBalances", [
      EthereumValue.fromAddress(param0)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  updateChildAccount(childAddress: Address): boolean {
    let result = super.call("updateChildAccount", [
      EthereumValue.fromAddress(childAddress)
    ]);

    return result[0].toBoolean();
  }

  try_updateChildAccount(childAddress: Address): CallResult<boolean> {
    let result = super.tryCall("updateChildAccount", [
      EthereumValue.fromAddress(childAddress)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBoolean());
  }

  createTopic(
    userAddress: Address,
    _tagIds: Array<BigInt>,
    fileName: string
  ): BigInt {
    let result = super.call("createTopic", [
      EthereumValue.fromAddress(userAddress),
      EthereumValue.fromUnsignedBigIntArray(_tagIds),
      EthereumValue.fromString(fileName)
    ]);

    return result[0].toBigInt();
  }

  try_createTopic(
    userAddress: Address,
    _tagIds: Array<BigInt>,
    fileName: string
  ): CallResult<BigInt> {
    let result = super.tryCall("createTopic", [
      EthereumValue.fromAddress(userAddress),
      EthereumValue.fromUnsignedBigIntArray(_tagIds),
      EthereumValue.fromString(fileName)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  getContractTokenBalance(): BigInt {
    let result = super.call("getContractTokenBalance", []);

    return result[0].toBigInt();
  }

  try_getContractTokenBalance(): CallResult<BigInt> {
    let result = super.tryCall("getContractTokenBalance", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  getAlgernonTokenBalance(_account: Address): BigInt {
    let result = super.call("getAlgernonTokenBalance", [
      EthereumValue.fromAddress(_account)
    ]);

    return result[0].toBigInt();
  }

  try_getAlgernonTokenBalance(_account: Address): CallResult<BigInt> {
    let result = super.tryCall("getAlgernonTokenBalance", [
      EthereumValue.fromAddress(_account)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }
}

export class ConstructorCall extends EthereumCall {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _tokenAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class DefaultCall extends EthereumCall {
  get inputs(): DefaultCall__Inputs {
    return new DefaultCall__Inputs(this);
  }

  get outputs(): DefaultCall__Outputs {
    return new DefaultCall__Outputs(this);
  }
}

export class DefaultCall__Inputs {
  _call: DefaultCall;

  constructor(call: DefaultCall) {
    this._call = call;
  }
}

export class DefaultCall__Outputs {
  _call: DefaultCall;

  constructor(call: DefaultCall) {
    this._call = call;
  }
}

export class AddMasterTagCall extends EthereumCall {
  get inputs(): AddMasterTagCall__Inputs {
    return new AddMasterTagCall__Inputs(this);
  }

  get outputs(): AddMasterTagCall__Outputs {
    return new AddMasterTagCall__Outputs(this);
  }
}

export class AddMasterTagCall__Inputs {
  _call: AddMasterTagCall;

  constructor(call: AddMasterTagCall) {
    this._call = call;
  }

  get _tag(): string {
    return this._call.inputValues[0].value.toString();
  }
}

export class AddMasterTagCall__Outputs {
  _call: AddMasterTagCall;

  constructor(call: AddMasterTagCall) {
    this._call = call;
  }
}

export class UpdateChildAccountCall extends EthereumCall {
  get inputs(): UpdateChildAccountCall__Inputs {
    return new UpdateChildAccountCall__Inputs(this);
  }

  get outputs(): UpdateChildAccountCall__Outputs {
    return new UpdateChildAccountCall__Outputs(this);
  }
}

export class UpdateChildAccountCall__Inputs {
  _call: UpdateChildAccountCall;

  constructor(call: UpdateChildAccountCall) {
    this._call = call;
  }

  get childAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class UpdateChildAccountCall__Outputs {
  _call: UpdateChildAccountCall;

  constructor(call: UpdateChildAccountCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class UpdateTopicCall extends EthereumCall {
  get inputs(): UpdateTopicCall__Inputs {
    return new UpdateTopicCall__Inputs(this);
  }

  get outputs(): UpdateTopicCall__Outputs {
    return new UpdateTopicCall__Outputs(this);
  }
}

export class UpdateTopicCall__Inputs {
  _call: UpdateTopicCall;

  constructor(call: UpdateTopicCall) {
    this._call = call;
  }

  get userAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _id(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _tagIds(): Array<BigInt> {
    return this._call.inputValues[2].value.toBigIntArray();
  }

  get _fileName(): string {
    return this._call.inputValues[3].value.toString();
  }
}

export class UpdateTopicCall__Outputs {
  _call: UpdateTopicCall;

  constructor(call: UpdateTopicCall) {
    this._call = call;
  }
}

export class UpdateTopicTagsCall extends EthereumCall {
  get inputs(): UpdateTopicTagsCall__Inputs {
    return new UpdateTopicTagsCall__Inputs(this);
  }

  get outputs(): UpdateTopicTagsCall__Outputs {
    return new UpdateTopicTagsCall__Outputs(this);
  }
}

export class UpdateTopicTagsCall__Inputs {
  _call: UpdateTopicTagsCall;

  constructor(call: UpdateTopicTagsCall) {
    this._call = call;
  }

  get _addIds(): Array<BigInt> {
    return this._call.inputValues[0].value.toBigIntArray();
  }

  get _removeIds(): Array<BigInt> {
    return this._call.inputValues[1].value.toBigIntArray();
  }

  get _topicTagIdxs(): Array<BigInt> {
    return this._call.inputValues[2].value.toBigIntArray();
  }

  get _taggedUserTopicIdxs(): Array<BigInt> {
    return this._call.inputValues[3].value.toBigIntArray();
  }

  get _topicId(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }
}

export class UpdateTopicTagsCall__Outputs {
  _call: UpdateTopicTagsCall;

  constructor(call: UpdateTopicTagsCall) {
    this._call = call;
  }
}

export class UpdateTopicTags1Call extends EthereumCall {
  get inputs(): UpdateTopicTags1Call__Inputs {
    return new UpdateTopicTags1Call__Inputs(this);
  }

  get outputs(): UpdateTopicTags1Call__Outputs {
    return new UpdateTopicTags1Call__Outputs(this);
  }
}

export class UpdateTopicTags1Call__Inputs {
  _call: UpdateTopicTags1Call;

  constructor(call: UpdateTopicTags1Call) {
    this._call = call;
  }

  get topicOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _tagIds(): Array<BigInt> {
    return this._call.inputValues[1].value.toBigIntArray();
  }

  get _topicId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class UpdateTopicTags1Call__Outputs {
  _call: UpdateTopicTags1Call;

  constructor(call: UpdateTopicTags1Call) {
    this._call = call;
  }
}

export class CreateTopicCall extends EthereumCall {
  get inputs(): CreateTopicCall__Inputs {
    return new CreateTopicCall__Inputs(this);
  }

  get outputs(): CreateTopicCall__Outputs {
    return new CreateTopicCall__Outputs(this);
  }
}

export class CreateTopicCall__Inputs {
  _call: CreateTopicCall;

  constructor(call: CreateTopicCall) {
    this._call = call;
  }

  get userAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _tagIds(): Array<BigInt> {
    return this._call.inputValues[1].value.toBigIntArray();
  }

  get fileName(): string {
    return this._call.inputValues[2].value.toString();
  }
}

export class CreateTopicCall__Outputs {
  _call: CreateTopicCall;

  constructor(call: CreateTopicCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class AddStakeCall extends EthereumCall {
  get inputs(): AddStakeCall__Inputs {
    return new AddStakeCall__Inputs(this);
  }

  get outputs(): AddStakeCall__Outputs {
    return new AddStakeCall__Outputs(this);
  }
}

export class AddStakeCall__Inputs {
  _call: AddStakeCall;

  constructor(call: AddStakeCall) {
    this._call = call;
  }

  get _topicId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _tagId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _amt(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class AddStakeCall__Outputs {
  _call: AddStakeCall;

  constructor(call: AddStakeCall) {
    this._call = call;
  }
}

export class IncreaseStakeCall extends EthereumCall {
  get inputs(): IncreaseStakeCall__Inputs {
    return new IncreaseStakeCall__Inputs(this);
  }

  get outputs(): IncreaseStakeCall__Outputs {
    return new IncreaseStakeCall__Outputs(this);
  }
}

export class IncreaseStakeCall__Inputs {
  _call: IncreaseStakeCall;

  constructor(call: IncreaseStakeCall) {
    this._call = call;
  }

  get _stakeIdx(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _amt(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class IncreaseStakeCall__Outputs {
  _call: IncreaseStakeCall;

  constructor(call: IncreaseStakeCall) {
    this._call = call;
  }
}

export class ReduceStakeCall extends EthereumCall {
  get inputs(): ReduceStakeCall__Inputs {
    return new ReduceStakeCall__Inputs(this);
  }

  get outputs(): ReduceStakeCall__Outputs {
    return new ReduceStakeCall__Outputs(this);
  }
}

export class ReduceStakeCall__Inputs {
  _call: ReduceStakeCall;

  constructor(call: ReduceStakeCall) {
    this._call = call;
  }

  get _stakeIdx(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _amt(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ReduceStakeCall__Outputs {
  _call: ReduceStakeCall;

  constructor(call: ReduceStakeCall) {
    this._call = call;
  }
}

export class DepositTokensCall extends EthereumCall {
  get inputs(): DepositTokensCall__Inputs {
    return new DepositTokensCall__Inputs(this);
  }

  get outputs(): DepositTokensCall__Outputs {
    return new DepositTokensCall__Outputs(this);
  }
}

export class DepositTokensCall__Inputs {
  _call: DepositTokensCall;

  constructor(call: DepositTokensCall) {
    this._call = call;
  }

  get _amt(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class DepositTokensCall__Outputs {
  _call: DepositTokensCall;

  constructor(call: DepositTokensCall) {
    this._call = call;
  }
}

export class WithdrawTokensCall extends EthereumCall {
  get inputs(): WithdrawTokensCall__Inputs {
    return new WithdrawTokensCall__Inputs(this);
  }

  get outputs(): WithdrawTokensCall__Outputs {
    return new WithdrawTokensCall__Outputs(this);
  }
}

export class WithdrawTokensCall__Inputs {
  _call: WithdrawTokensCall;

  constructor(call: WithdrawTokensCall) {
    this._call = call;
  }

  get _amt(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class WithdrawTokensCall__Outputs {
  _call: WithdrawTokensCall;

  constructor(call: WithdrawTokensCall) {
    this._call = call;
  }
}

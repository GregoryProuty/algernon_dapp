// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Address,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class Tag extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Tag entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Tag entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Tag", id.toString(), this);
  }

  static load(id: string): Tag | null {
    return store.get("Tag", id) as Tag | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get tag(): string {
    let value = this.get("tag");
    return value.toString();
  }

  set tag(value: string) {
    this.set("tag", Value.fromString(value));
  }

  get topics(): Array<string> | null {
    let value = this.get("topics");
    if (value === null) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set topics(value: Array<string> | null) {
    if (value === null) {
      this.unset("topics");
    } else {
      this.set("topics", Value.fromStringArray(value as Array<string>));
    }
  }

  get stakes(): Array<string> | null {
    let value = this.get("stakes");
    if (value === null) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set stakes(value: Array<string> | null) {
    if (value === null) {
      this.unset("stakes");
    } else {
      this.set("stakes", Value.fromStringArray(value as Array<string>));
    }
  }

  get createdAt(): BigInt {
    let value = this.get("createdAt");
    return value.toBigInt();
  }

  set createdAt(value: BigInt) {
    this.set("createdAt", Value.fromBigInt(value));
  }
}

export class Topic extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Topic entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Topic entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Topic", id.toString(), this);
  }

  static load(id: string): Topic | null {
    return store.get("Topic", id) as Topic | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get owner(): string | null {
    let value = this.get("owner");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set owner(value: string | null) {
    if (value === null) {
      this.unset("owner");
    } else {
      this.set("owner", Value.fromString(value as string));
    }
  }

  get tags(): Array<string | null> {
    let value = this.get("tags");
    return value.toStringArray();
  }

  set tags(value: Array<string | null>) {
    this.set("tags", Value.fromStringArray(value));
  }

  get contentHash(): string {
    let value = this.get("contentHash");
    return value.toString();
  }

  set contentHash(value: string) {
    this.set("contentHash", Value.fromString(value));
  }

  get title(): string {
    let value = this.get("title");
    return value.toString();
  }

  set title(value: string) {
    this.set("title", Value.fromString(value));
  }

  get description(): string | null {
    let value = this.get("description");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set description(value: string | null) {
    if (value === null) {
      this.unset("description");
    } else {
      this.set("description", Value.fromString(value as string));
    }
  }

  get url(): string | null {
    let value = this.get("url");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set url(value: string | null) {
    if (value === null) {
      this.unset("url");
    } else {
      this.set("url", Value.fromString(value as string));
    }
  }

  get notes(): string | null {
    let value = this.get("notes");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set notes(value: string | null) {
    if (value === null) {
      this.unset("notes");
    } else {
      this.set("notes", Value.fromString(value as string));
    }
  }

  get supports(): Array<string> {
    let value = this.get("supports");
    return value.toStringArray();
  }

  set supports(value: Array<string>) {
    this.set("supports", Value.fromStringArray(value));
  }

  get requires(): Array<string> {
    let value = this.get("requires");
    return value.toStringArray();
  }

  set requires(value: Array<string>) {
    this.set("requires", Value.fromStringArray(value));
  }

  get stakes(): Array<string> | null {
    let value = this.get("stakes");
    if (value === null) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set stakes(value: Array<string> | null) {
    if (value === null) {
      this.unset("stakes");
    } else {
      this.set("stakes", Value.fromStringArray(value as Array<string>));
    }
  }

  get createdAt(): BigInt {
    let value = this.get("createdAt");
    return value.toBigInt();
  }

  set createdAt(value: BigInt) {
    this.set("createdAt", Value.fromBigInt(value));
  }

  get updatedAt(): BigInt {
    let value = this.get("updatedAt");
    return value.toBigInt();
  }

  set updatedAt(value: BigInt) {
    this.set("updatedAt", Value.fromBigInt(value));
  }
}

export class User extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save User entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save User entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("User", id.toString(), this);
  }

  static load(id: string): User | null {
    return store.get("User", id) as User | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get address(): Bytes | null {
    let value = this.get("address");
    if (value === null) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set address(value: Bytes | null) {
    if (value === null) {
      this.unset("address");
    } else {
      this.set("address", Value.fromBytes(value as Bytes));
    }
  }

  get topics(): Array<string> | null {
    let value = this.get("topics");
    if (value === null) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set topics(value: Array<string> | null) {
    if (value === null) {
      this.unset("topics");
    } else {
      this.set("topics", Value.fromStringArray(value as Array<string>));
    }
  }

  get stakes(): Array<string> | null {
    let value = this.get("stakes");
    if (value === null) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set stakes(value: Array<string> | null) {
    if (value === null) {
      this.unset("stakes");
    } else {
      this.set("stakes", Value.fromStringArray(value as Array<string>));
    }
  }

  get firstActive(): BigInt {
    let value = this.get("firstActive");
    return value.toBigInt();
  }

  set firstActive(value: BigInt) {
    this.set("firstActive", Value.fromBigInt(value));
  }

  get lastActive(): BigInt {
    let value = this.get("lastActive");
    return value.toBigInt();
  }

  set lastActive(value: BigInt) {
    this.set("lastActive", Value.fromBigInt(value));
  }
}

export class Stake extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Stake entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Stake entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Stake", id.toString(), this);
  }

  static load(id: string): Stake | null {
    return store.get("Stake", id) as Stake | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get staker(): string {
    let value = this.get("staker");
    return value.toString();
  }

  set staker(value: string) {
    this.set("staker", Value.fromString(value));
  }

  get topic(): string {
    let value = this.get("topic");
    return value.toString();
  }

  set topic(value: string) {
    this.set("topic", Value.fromString(value));
  }

  get tag(): string {
    let value = this.get("tag");
    return value.toString();
  }

  set tag(value: string) {
    this.set("tag", Value.fromString(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    return value.toBigInt();
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }

  get createdAt(): BigInt {
    let value = this.get("createdAt");
    return value.toBigInt();
  }

  set createdAt(value: BigInt) {
    this.set("createdAt", Value.fromBigInt(value));
  }

  get updatedAt(): BigInt {
    let value = this.get("updatedAt");
    return value.toBigInt();
  }

  set updatedAt(value: BigInt) {
    this.set("updatedAt", Value.fromBigInt(value));
  }
}
